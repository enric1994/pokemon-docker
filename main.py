# -*- coding: utf-8 -*-
"""Copy of Make Your Own AI-Generated Pokémon! (@minimaxir)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pr1_KEOTBoAuaTFYopgImPBHl4Seqwhz

# Make Your Own AI-Generated Pokémon!

![](https://github.com/minimaxir/ai-generated-pokemon-rudalle/blob/master/example.png?raw=true)

by [Max Woolf](https://minimaxir.com)

This notebook allows you to create AI-generated Pokemon in two clicks using a [ruDALL-E](https://github.com/sberbank-ai/ru-dalle) model finetuned on the original images of all the Pokemon! This model was used to create Pokémon that resulted in AI-Generated Pokémon that went viral ([10k+ retweets](https://twitter.com/minimaxir/status/1470913487085785089) on Twitter + [30k+ upvotes](https://www.reddit.com/r/pokemon/comments/rgmyxp/i_trained_an_ai_on_all_the_official_pokemon/) on Reddit)

**(please don't use this notebook to create NFTs k thx)**

If you use any generated Pokémon from this Notebook in any content, a link back to the Notebook would be appreciated!

To get started:

1. Copy this notebook to your Google Drive to keep it and save your changes. (File -> Save a Copy in Drive)
2. Run the cells below by clicking the **Play** button on the left of the cell (also visible when mousing-over the cell)

[Model on Hugging Face](https://huggingface.co/minimaxir/ai-generated-pokemon-rudalle)

[GitHub Repo](https://github.com/minimaxir/ai-generated-pokemon-rudalle)

[BuzzFeed Quiz](https://www.buzzfeed.com/daves4/pokemon-ai-quiiz)

_Last Updated: Jan 13th 2022_
"""

#@title Download Models and Install/Load Packages (may take a few minutes)

# !pip install rudalle==0.4.0 > /dev/null

from rudalle.pipelines import generate_images, show
from rudalle import get_rudalle_model, get_tokenizer, get_vae
from rudalle.utils import seed_everything
from huggingface_hub import hf_hub_url, cached_download
import os
import torch
import shutil
# from IPython.display import clear_output

model_filename = "pytorch_model.bin"
device = "cuda"

config_file_url = hf_hub_url(repo_id="minimaxir/ai-generated-pokemon-rudalle", filename=model_filename)
cached_download(config_file_url, cache_dir='/content', force_filename=model_filename)
model = get_rudalle_model('Malevich', pretrained=False, fp16=True, device=device)
model.load_state_dict(torch.load(model_filename, map_location='cpu')) 
vae = get_vae().to(device)
tokenizer = get_tokenizer()

"""The next cell generates the Pokémon! The Pokémon are generated in batches, `images_per_row` Pokémon per batch, `num_rows` batches. Each batch will display the Pokémon in a grid, and after it is done, all generated Pokémon will appear in a single grid for easy sharing on social media! (You can right click each grid to Download as an image)

If you like a specific Pokémon you generated, they will also be downloadable from the `gen_images` folder in the sidebar.

On the GPU given in a notebook for free, a batch of 3 Pokémon will take about 7.5 minutes to generate. **If you pay $10/mo for Colab Pro, you can generate about 5x faster** (1.5 min / 3 Pokémon batch).
"""

#@title Generate the Pokémon!


# images_per_row = 6 #@param {type:"slider", min:1, max:8, step:1}
# num_rows = 6 #@param {type:"slider", min:1, max:8, step:1}

# # In theory you could get more specific Pokemon by
# # specifying the type (see the repo linked in the intro),
# # but it practice it does not influence generation much.
# text = 'Покемон'

# gen_configs = [
#         (2048, 0.995),
#         (1536, 0.99),
#         (1024, 0.99),
#         (1024, 0.98),
#         (512, 0.97),
#         (384, 0.96),
#         (256, 0.95),
#         (128, 0.95), 
#     ]

# gen_configs = gen_configs[0:num_rows]

# pil_images = []
# scores = []

# img_count = 0
# for top_k, top_p in gen_configs:
#       _pil_images, _scores = generate_images(text, tokenizer, model, vae, top_k=top_k, images_num=images_per_row, top_p=top_p)
#       for images in _pil_images:
#             images.save(f"/main/data/{img_count:03d}.png")
#             img_count += 1
#       show(_pil_images, images_per_row, size=28)
#       pil_images += _pil_images
# show([pil_image for pil_image in pil_images], images_per_row, size=56)

"""## Endless Generation of Pokémon

Want to create hundreds of individual Pokemon? You can with these cells, with generate new Pokemon continuously saving them to yout personal [Google Drive](https://drive.google.com/drive/my-drive) to view and download at your leisure!

The next cell allows this Notebook to access your Google Drive and creates an `ai_generated_pokemon` folder there.
"""

#@title Authenticate Google Drive

# from google.colab import drive
# drive.mount('/content/drive')

# !mkdir /content/batch > /dev/null
# !mkdir /content/drive/MyDrive/ai_generated_pokemon/ > /dev/null

"""The next cell will generate _endless_ amounts of Pokemon to the created `ai_generated_pokemon` folder in your Google Drive, 8 at a time (you can reload the folder in your Google Drive to see them appear after each iteration). You can stop the cell when done!

**It's strongly recommended to pay for Colab Pro** if you are generating Pokémon in bulk both for speed and to reduce the probability of timeouts.
"""

#@title Batch Generation of Pokémon to Google Drive


text = 'Покемон'
images_num = 4
gen_folder = "/main/data/" # can change if needed
gen_configs = [
        (2048, 0.995),
        (1536, 0.99),
        (1024, 0.99),
        (1024, 0.98),
        (512, 0.97),
        (384, 0.96),
        (256, 0.95),
        (128, 0.95), 
    ]

batch_num = 0
# If there is already Pokemon generated,
# start counting from the last one
gen_pokemon = os.listdir(gen_folder)
if len(gen_pokemon) > 0:
  batch_num = int(sorted(gen_pokemon)[-1][0:5]) + 1

print(f"Starting batch generation from {batch_num}.")

while True:
  for top_k, top_p in gen_configs:
        _pil_images, _scores = generate_images(text, tokenizer, model, vae, top_k=top_k, images_num=images_num, top_p=top_p)
        for images in _pil_images:
            # import pdb;pdb.set_trace()
            images.save(f"/main/data/{batch_num:05d}.png")
            # #   shutil.copy(f"/content/batch/{batch_num:05d}.png", f"{gen_folder}{batch_num:05d}.png" )
            batch_num += 1
        # clear_output(wait=True)

"""## License

MIT License

Copyright (c) 2022 Max Woolf

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

---

Original ruDALL-E notebook code adapted under the Apache license located [here](https://github.com/sberbank-ai/ru-dalle/blob/master/LICENSE.txt).
"""